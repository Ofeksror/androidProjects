
import java.util.*;

public class programs
{
    public static Scanner reader = new Scanner(System.in);
    // Multiply a BIG number by mul
    
    public static void main(String[] args)
    {
        System.out.print("Enter length of number: ");
        int length = reader.nextInt();

        Node<Integer> number = generateBigNumber(length);
        System.out.println(number);

        System.out.println("Multiplying by 3: ");
        Node<Integer> mul3 = multiplyBigNumber(number, 3);
        System.out.println(mul3);

        System.out.println("Multiplying by 7: ");
        Node<Integer> mul7 = multiplyBigNumber(number, 7);
        System.out.println(mul7);
    }

    public static Node<Integer> generateBigNumber(int length)
    {
        Node<Integer> number = null;

        int n;
        for (int i = 0; i < length; i++)
        {
            n = (int) (Math.random() * 10);
            
            number = new Node<Integer>(n, number);
        }

        return number;
    }

    public static Node<Integer> multiplyBigNumber(Node<Integer> number, int mul)
    {
        // Reverse the number
        Node<Integer> reversedNumber = reverseList(number);

        // The resulted number of the multiplication
        Node<Integer> result = null;

        // Multiply each digit by mul, save the carry.
        int carry = 0;

        Node<Integer> pos = reversedNumber;
        while (pos != null)
        {
            int multiplication = pos.getValue() * mul;
            multiplication += carry;

            if (multiplication >= 10)
            {
                carry = multiplication / 10;
            }
            
            result = new Node<Integer>(multiplication % 10, result);

            pos = pos.getNext();
        }
        
        if (carry > 0)
        {
            result = new Node<Integer>(carry, result);
        }

        return result;
    }

    public static Node<Integer> reverseList(Node<Integer> list)
    {
        Node<Integer> reversed = null; 
        
        Node<Integer> pos = list;
        while (pos != null)
        {
            reversed = new Node<Integer>(pos.getValue(), reversed);
            pos = pos.getNext();
        }

        return reversed;
    }
}
